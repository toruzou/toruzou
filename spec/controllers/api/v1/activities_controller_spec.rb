require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Api::V1::ActivitiesController do

  valid_param = {action: 'Email', date: "2013-09-07"}

  before(:all) do
    @person1   = FactoryGirl.create(:person)
    @person2   = FactoryGirl.create(:person)
    @person3   = FactoryGirl.create(:person)

    @user1     = FactoryGirl.create(:user)
    @user2     = FactoryGirl.create(:user)
    @user3     = FactoryGirl.create(:user)

    @activity1 = FactoryGirl.create(:activity, action: 'Meeting', date: Date.today - 7, done: true)
    @activity2 = FactoryGirl.create(:activity, action: 'Call', date: Date.today, done: false)
    @activity3 = FactoryGirl.create(:activity, action: 'Email', date: Date.tomorrow, 
                                    done: true, users: [ @user1, @user2 ], 
                                    people: [@person1, @person2])
    @activity4 = FactoryGirl.create(:activity, action: 'Task', date: Date.today + 7, 
                                    done: false, users: [ @user1, @user3 ],
                                    people: [@person2, @person3])

    @organization1 = @activity1.organization
    @organization2 = @activity2.organization
  end

  after(:all) do
    truncate_activity(@activity1, @activity2, @activity3, @activity4)

    @person1.destroy if @person1
    @person2.destroy if @person2
    @person3.destroy if @person2

    @user1.destroy if @user1
    @user2.destroy if @user2
    @user3.destroy if @user2

    @organization1.destroy if @organization1
    @organization2.destroy if @organization2
  end

  before(:each) do
    login_user
  end

  describe "GET index" do
    context "with no filter condition" do
      it "render all records." do
        get :index, page: 1

        assert_success
        assert_total_entries(4)

        assert_contains_entry(@activity1.id, @activity2.id, @activity3.id)
      end
    end

    context "with filter condition" do
      describe ":organization_id" do
        it "renders activity for designated param." do
          get :index, page: 1, organization_id: @organization1.id

          assert_success
          assert_total_entries(1)

          assert_contains_entry(@activity1.id)
        end
      end

      describe ":organization_name" do
        it "renders activity for designated param." do
          get :index, page: 1, organization_name: @organization2.name

          assert_success
          assert_total_entries(1)

          assert_contains_entry(@activity2.id)
        end
      end

      describe ":deal_name" do
        it "renders activity for designated param." do
          get :index, page: 1, deal_name: @activity1.deal.name

          assert_success
          assert_total_entries(1)

          assert_contains_entry(@activity1.id)
        end
      end

      describe ":deal_id" do
        it "renders activity for designated param." do
          get :index, page: 1, deal_id: @activity2.deal.id

          assert_success
          assert_total_entries(1)

          assert_contains_entry(@activity2.id)
        end
      end

      describe ":subject" do
        it "renders activity for designated param." do
          get :index, page: 1, subject: @activity3.subject

          assert_success
          assert_total_entries(1)

          assert_contains_entry(@activity3.id)
        end
      end

      describe ":action" do
        context "single" do
          it "renders activity for designated param." do
            get :index, page: 1, actions: 'Email'

            assert_success
            assert_total_entries(1)

            assert_contains_entry(@activity3.id)
          end
        end

        context "array with single value" do
          it "renders activity for designated param." do
            get :index, page: 1, actions: ['Meeting']

            assert_success
            assert_total_entries(1)

            assert_contains_entry(@activity1.id)
          end
        end

        context "array with multiple value" do
          it "renders activity for designated param." do
            get :index, page: 1, actions: ['Call', 'Email']

            assert_success
            assert_total_entries(2)

            assert_contains_entry(@activity2.id, @activity3.id)
          end
        end
      end

      describe ":users_ids" do
        context "single" do
          it "renders activity for designated param." do
            get :index, page: 1, users_ids: @user1.id

            assert_success
            assert_total_entries(2)

            assert_contains_entry(@activity3.id, @activity4.id)
          end
        end

        context "array with single value" do
          it "renders activity for designated param." do
            get :index, page: 1, users_ids: [ @user1.id ]

            assert_success
            assert_total_entries(2)

            assert_contains_entry(@activity3.id, @activity4.id)
          end
        end

        context "array with multiple value" do
          it "renders activity for designated param." do
            get :index, page: 1, users_ids: [ @user2.id, @user3.id ]

            assert_success
            assert_total_entries(2)

            assert_contains_entry(@activity3.id, @activity4.id)
          end
        end
      end

      describe ":people_ids" do
        context "single" do
          it "renders activity for designated param." do
            get :index, page: 1, people_ids: @person1.id

            assert_success
            assert_total_entries(1)

            assert_contains_entry(@activity3.id)
          end
        end
        context "array with single value" do
          it "renders activity for designated param." do
            get :index, page: 1, people_ids: [ @person2.id ]

            assert_success
            assert_total_entries(2)

            assert_contains_entry(@activity3.id, @activity4.id)
          end
        end
        context "array with single value" do
          it "renders activity for designated param." do
            get :index, page: 1, people_ids: [ @person1.id, @person3.id ]

            assert_success
            assert_total_entries(2)

            assert_contains_entry(@activity3.id, @activity4.id)
          end
        end
      end

      describe ":term" do

        context "Overdue" do
          it "renders activity overdue." do
            get :index, page: 1, term: 'Overdue'

            assert_success
            assert_total_entries(1)

            assert_contains_entry(@activity1.id)
          end
        end

        context "Last Week" do
          it "renders activity whose date is older than last week." do
            get :index, page: 1, term: 'Last Week'

            assert_success
            assert_total_entries(1)

            assert_contains_entry(@activity1.id)
          end
        end

        context "Today" do
          it "renders activity whose date is today." do
            get :index, page: 1, term: 'Today'

            assert_success
            assert_total_entries(1)

            assert_contains_entry(@activity2.id)
          end
        end

        context "Tomorrow" do
          it "renders activity whose date is tomorrow." do
            get :index, page: 1, term: 'Tomorrow'

            assert_success
            assert_total_entries(1)

            assert_contains_entry(@activity3.id)
          end
        end

        context "This Week"do
          it "renders activity whose date is in this week." do
            get :index, page: 1, term: 'This Week'

            assert_success

            if Date.today.wday == 0 then
              assert_total_entries(1)
              assert_contains_entry(@activity2.id)
            else
              assert_total_entries(2)
              assert_contains_entry(@activity2.id, @activity3.id)
            end
          end
        end

        context "Next Week" do
          it "renders activity whose date is in next week." do
            get :index, page: 1, term: 'Next Week'

            assert_success

            if Date.today.wday == 0 then
              assert_total_entries(2)
              assert_contains_entry(@activity3.id, @activity4.id)
            else
              assert_total_entries(1)
              assert_contains_entry(@activity4.id)
            end
          end
        end

        context "Invalid value" do
          it "returns all activities" do
            get :index, page: 1, term: 'invalid value'

            assert_success
            assert_contains_entry(@activity1.id, @activity2.id, @activity3.id, @activity4.id)
          end
        end

      end

      describe ":done" do

        context "TRUE (value: 1)" do
          it "renders activity which is done." do
            get :index, page: 1, status: 1

            assert_success
            assert_total_entries(2)

            assert_contains_entry(@activity1.id, @activity3.id)
          end
        end

        context "FALSE (value: 0)" do
          it "renders activity which is not done." do
            get :index, page: 1, status: 0

            assert_success
            assert_total_entries(2)

            assert_contains_entry(@activity2.id, @activity4.id)
          end
        end

      end

    end
  end

  describe "GET show" do
    it "shows designated activity when given id is valid." do
      get :show, id: @activity1.id

      assert_success
      expect(JSON.parse(body)['id']).to eq(@activity1.id)
    end
  end

  describe "POST create" do
    context "with valid params" do
      it "creates new entity." do
        param = { subject: 'new activity', 
          user_ids: [ @user1.id, @user2.id ], 
          people_ids: [ @person1.id, @person2.id ]
        }.merge(valid_param)

        post :create, activity: param

        assert_success
        expect(JSON.parse(body)['id']).not_to be_nil
        expect(JSON.parse(body)['subject']).to eq('new activity')

        assert JSON.parse(body)['people_ids'].include?(@person1.id)
        assert JSON.parse(body)['people_ids'].include?(@person2.id)

      end
    end

    context "with invalid params" do
      it "doesn't create new record and return status 422." do
        param = { subject: '' }.merge(valid_param)

        post :create, activity: param

        assert_unprocessable_entity
        expect(body).to be_json_eql( JSON.generate({ subject: [
          "can't be blank"
        ] }))
      end
    end
  end

  describe "PUT update" do
    before(:all) do
      @person11 = FactoryGirl.create(:person)
      @person12 = FactoryGirl.create(:person)
      @target = FactoryGirl.create(:activity, 
                                   organization_id: @organization1.id, 
                                   people: [ @person11 ]
                                  )
    end

    after(:all) do
      truncate_activity(@target)
      @person11.destroy if @person11
      @person12.destroy if @person12
    end

    context "with valid params" do

      it "updates the designated activity." do
        param = { subject: 'updated subject', 
                  people_ids: [ @person12.id ]
                }
        
        put :update, id: @target.id, activity: param

        assert_success
        expect(JSON.parse(body)['id']).to eq(@target.id)
        expect(JSON.parse(body)['subject']).to eq('updated subject')

        assert JSON.parse(body)['people_ids'].include?(@person12.id)
        assert !(JSON.parse(body)['people_ids'].include?(@person11.id))
      end

    end

    context "with invalid params" do
      it "can't update the designated activity." do

        param = {subject: '', organization_id: @organization2.id}

        put :update, id: @target.id, activity: param

        assert_unprocessable_entity
        expect(body).to be_json_eql( JSON.generate({ subject: [
          "can't be blank"
        ] }))

        get :show, id: @target.id

        # verify unnecessary update is not executed.
        expect(JSON.parse(body)['organization_id']).to eq(@organization1.id)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested activity" do
      target = FactoryGirl.create(:activity)

      delete :destroy, id: target.id

      assert_success
      expect(JSON.parse(body)['id']).to eq(target.id)

      truncate_activity(target) if target
    end

  end

  private
  def truncate_activity(*activities)
    activities.each { |activity|
      activity.organization.destroy if activity.organization
      truncate_deal(activity.deal) if activity.deal
      activity.people.each { |person|
        person.destroy
      }
      activity.users.each { |user|
        user.destroy
      }

      activity.destroy if activity
    }
  end

  def truncate_deal(*deals)
    deals.each { |deal|
      deal.organization.destroy if deal.organization
      deal.pm.destroy if deal.pm
      deal.sales.destroy if deal.sales
      deal.contact.destroy if deal.contact
      deal.destroy
    }
  end

end
